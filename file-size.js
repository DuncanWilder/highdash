const util = require('node:util');
const chalk = require('chalk');
const exec = util.promisify(require('node:child_process').exec);
const {readdirSync} = require('node:fs');

function getDirectories(source) {
	return readdirSync(source, {withFileTypes: true})
		.filter((directoryOrFile) => directoryOrFile.isDirectory())
		.map((directory) => directory.name);
}

function humanFileSize(bytes, si = false, dp = 1) {
	const thresh = si ? 1000 : 1024;

	if (Math.abs(bytes) < thresh) {
		return `${bytes} B`;
	}

	const units = si
		? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
		: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
	let u = -1;
	const r = 10 ** dp;

	do {
		// biome-ignore lint/style/noParameterAssign: I copied and pasted this code
		bytes /= thresh;
		++u;
	} while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);

	return `${bytes.toFixed(dp)} ${units[u]}`;
}

/**
 * Sizes from the Import Cost VSCode extension
 */
const lodashSizesGzipped = {
	add: 868,
	after: 1012,
	ary: 4672,
	assign: 2885,
	assignIn: 2794,
	assignInWith: 2801,
	assignWith: 2850,
	at: 3306,
	attempt: 1650,
	before: 1028,
	bind: 4821,
	bindAll: 5233,
	bindKey: 4824,
	camelCase: 2749,
	capitalize: 1267,
	castArray: 216,
	ceil: 1251,
	chunk: 1387,
	clamp: 937,
	clone: 5106,
	cloneDeep: 5107,
	cloneDeepWith: 5115,
	cloneWith: 5112,
	compact: 206,
	concat: 945,
	cond: 6515,
	conforms: 5199,
	conformsTo: 1741,
	constant: 157,
	countBy: 6451,
	create: 2338,
	curry: 4682,
	curryRight: 4681,
	debounce: 1279,
	deburr: 1550,
	defaults: 2630,
	defaultsDeep: 4851,
	defaultTo: 164,
	defer: 1477,
	delay: 1761,
	difference: 3114,
	differenceBy: 6973,
	differenceWith: 3150,
	divide: 870,
	drop: 1073,
	dropRight: 1077,
	dropRightWhile: 6213,
	dropWhile: 6209,
	each: 1935,
	eachRight: 1942,
	endsWith: 1215,
	entries: 2460,
	entriesIn: 2464,
	eq: 166,
	escape: 883,
	escapeRegExp: 828,
	every: 6361,
	extend: 2864,
	extendWith: 2866,
	fill: 1389,
	filter: 6270,
	find: 6540,
	findIndex: 6445,
	findKey: 6180,
	findLast: 6554,
	findLastIndex: 6458,
	findLastKey: 6174,
	first: 182,
	flatMap: 6434,
	flatMapDeep: 6438,
	flatMapDepth: 6752,
	flatten: 864,
	flattenDeep: 870,
	flattenDepth: 1259,
	flip: 4652,
	floor: 1251,
	flow: 2617,
	flowRight: 2619,
	forEach: 1925,
	forEachRight: 1930,
	forIn: 1795,
	forInRight: 1797,
	forOwn: 1787,
	forOwnRight: 1792,
	fromPairs: 201,
	functions: 1754,
	functionsIn: 1769,
	get: 2554,
	groupBy: 6454,
	gt: 910,
	gte: 896,
	has: 2829,
	hasIn: 2821,
	head: 168,
	identity: 155,
	includes: 2329,
	indexOf: 1123,
	initial: 276,
	inRange: 984,
	intersection: 2941,
	intersectionBy: 6942,
	intersectionWith: 2988,
	invert: 1873,
	invertBy: 6233,
	invoke: 3151,
	invokeMap: 4370,
	isArguments: 621,
	isArray: 158,
	isArrayBuffer: 752,
	isArrayLike: 665,
	isArrayLikeObject: 695,
	isBoolean: 563,
	isBuffer: 431,
	isDate: 744,
	isElement: 714,
	isEmpty: 2100,
	isEqual: 4729,
	isEqualWith: 4756,
	isError: 752,
	isFinite: 323,
	isFunction: 594,
	isInteger: 945,
	isLength: 196,
	isMap: 1491,
	isMatch: 4937,
	isMatchWith: 4947,
	isNaN: 578,
	isNative: 1013,
	isNil: 155,
	isNull: 158,
	isNumber: 559,
	isObject: 184,
	isObjectLike: 173,
	isPlainObject: 682,
	isRegExp: 747,
	isSafeInteger: 982,
	isSet: 1493,
	isString: 583,
	isSymbol: 558,
	isTypedArray: 958,
	isUndefined: 153,
	isWeakMap: 1295,
	isWeakSet: 556,
	iteratee: 7599,
	join: 186,
	kebabCase: 2360,
	keyBy: 6436,
	keys: 1650,
	keysIn: 1665,
	last: 178,
	lastIndexOf: 1126,
	lowerCase: 2359,
	lowerFirst: 1241,
	lt: 908,
	lte: 896,
	map: 6286,
	mapKeys: 6258,
	mapValues: 6260,
	matches: 6570,
	matchesProperty: 7232,
	max: 692,
	maxBy: 6128,
	mean: 277,
	meanBy: 6122,
	memoize: 1878,
	merge: 4766,
	mergeWith: 4767,
	method: 3167,
	methodOf: 3164,
	min: 693,
	minBy: 6130,
	mixin: 1995,
	multiply: 870,
	negate: 274,
	noConflict: 0,
	noop: 151,
	now: 311,
	nth: 1073,
	nthArg: 1899,
	omit: 6665,
	omitBy: 6683,
	once: 1039,
	orderBy: 6666,
	over: 6660,
	overArgs: 6681,
	overEvery: 6671,
	overSome: 6659,
	pad: 1833,
	padEnd: 1806,
	padStart: 1808,
	parseInt: 820,
	partial: 4812,
	partialRight: 4813,
	partition: 6358,
	pick: 3804,
	pickBy: 6588,
	property: 2602,
	propertyOf: 2544,
	pull: 1801,
	pullAll: 577,
	pullAllBy: 6353,
	pullAllWith: 579,
	pullAt: 3789,
	random: 1379,
	range: 1329,
	rangeRight: 1333,
	rearg: 5053,
	reduce: 6339,
	reduceRight: 6331,
	reject: 6348,
	remove: 6347,
	repeat: 1475,
	replace: 801,
	rest: 1816,
	result: 2563,
	reverse: 185,
	round: 1249,
	runInContext: 0,
	sample: 1845,
	sampleSize: 2418,
	set: 2881,
	setWith: 2896,
	shuffle: 1912,
	size: 1890,
	slice: 1351,
	snakeCase: 2362,
	some: 6356,
	sortBy: 7267,
	sortedIndex: 896,
	sortedIndexBy: 6239,
	sortedIndexOf: 943,
	sortedLastIndex: 897,
	sortedLastIndexBy: 6241,
	sortedLastIndexOf: 942,
	sortedUniq: 280,
	sortedUniqBy: 6113,
	split: 1769,
	spread: 1997,
	startCase: 2719,
	startsWith: 1198,
	stubArray: 154,
	stubFalse: 156,
	stubObject: 155,
	stubString: 156,
	stubTrue: 153,
	subtract: 869,
	sum: 249,
	sumBy: 6101,
	tail: 276,
	take: 1066,
	takeRight: 1074,
	takeRightWhile: 6215,
	takeWhile: 6211,
	template: 4381,
	throttle: 1334,
	times: 1089,
	toArray: 2928,
	toFinite: 900,
	toInteger: 929,
	toLength: 1002,
	toLower: 777,
	toNumber: 839,
	toPairs: 2449,
	toPairsIn: 2453,
	toPath: 2429,
	toPlainObject: 2249,
	toSafeInteger: 1009,
	toString: 752,
	toUpper: 775,
	transform: 6333,
	trim: 1469,
	trimEnd: 1411,
	trimStart: 1384,
	truncate: 2114,
	unary: 4687,
	unescape: 894,
	union: 3190,
	unionBy: 7031,
	unionWith: 3229,
	uniq: 2375,
	uniqBy: 6463,
	uniqueId: 773,
	uniqWith: 2395,
	unset: 2717,
	unzip: 917,
	unzipWith: 1016,
	update: 2984,
	updateWith: 2992,
	upperCase: 2359,
	upperFirst: 1240,
	values: 1735,
	valuesIn: 1746,
	without: 2829,
	words: 1450,
	wrap: 4849,
	xor: 3491,
	xorBy: 7241,
	xorWith: 3531,
	zip: 1700,
	zipObject: 1199,
	zipObjectDeep: 2941,
	zipWith: 1777,
};

async function main() {
	const directories = getDirectories('./dist');
	let totalSize = 0;
	let amountSaved = 0;
	for (const directory of directories) {
		const gzipSizeInBytes = Number.parseInt(await (await exec(`gzip -c ./dist/${directory}/${directory}.js | wc -c`)).stdout.trim());
		totalSize += gzipSizeInBytes;
		const paddedFileName = `${directory} `.padEnd(25, '-');
		const fileSize = chalk.yellow(humanFileSize(gzipSizeInBytes));
		const compactedSize = lodashSizesGzipped[directory] ? lodashSizesGzipped[directory] - gzipSizeInBytes : 0;

		const colour = compactedSize > 0 ? chalk.green : chalk.red;
		const symbol = compactedSize > 0 ? '-' : '+';
		const humanSize = humanFileSize(Math.abs(compactedSize));
		const compactedSizePrintOut = compactedSize ? colour`(${symbol}${humanSize})` : '';
		amountSaved += compactedSize;
		console.log(
			paddedFileName,
			fileSize,
			compactedSizePrintOut,
		);
	}

	console.log('-'.padEnd(25, '-'));
	console.log('Size '.padEnd(25, '-'), chalk.green(humanFileSize(totalSize)));
	console.log('Size saved versus Lodash '.padEnd(25, '-'), chalk.green(humanFileSize(amountSaved)));
}

main();
